------------------------BASIC REACT-------------------------

sudo apt-get update
sudo apt-get upgrade

Clear the npm cache
    npm cache clean
When installing some dependencies, you should make sure to clear the NPM cache first.

    npm install n
    npm install -g n
This package will take care of handling the Node version in the root.

Install a new version of Node
    n lts 
    n latest

Uninstall previously installed versions
    n prune 



-----COMPONENTS, LAYOUT and STYLES
npx create-react-app myProyectName
-create components and layout
-create css 

-----EVENT HANDLING
in todoItem add the onClick event on the check mark and on the cross symbol
in 'todoSearch' use a 'hook' to handle the state of the 'input'

-----STATE MANAGMENT - useState
now the state that refers to the value will be in App.js 
and todoSearch will receive that state.

-----FILTER 'to dos' - onChange - 
in App.js filter the 'to does' according to what is entered in the search 
input

-----COMPLETE AND REMOVE 'todos' - changing the state - onClick
In App.js make a function that changes the completed property to true, in the array 
of 'to dos,' when the check image is clicked.so that the 'todo' 
is shown as a completed task

Also make a function that removes the 'todos' when clicking on the cross

-----DATA PERSISTENCE - Local Storage
make a space in 'local storage' to save the 'todos' and be able to get them from it.
make a 'custom hook' to bundle everything referring to 'localStorage' in 'App.js'

-----REACT CONTEXT - SHARED STATE - useContext
in 'App.js' share state via 'React.createContext()' to child components.
Make use of the useContext 'hook' to consume the 'props' in AppUI, TodoSearch and TodoCounter.

-----MODAL - React.createModal()
create a modal that appears when the add 'todo' button is clicked

-----FORM
create the 'TodoForm' component to return it in the 'modal', 
in order to register a new 'todo' and save it to 'localStorage'

-----ICONS
create a function to handle the delete and complete icons that will be used in 'todoitem'




-----------------RENDERING AND COMPOSITION PATTERNS-------------------------

-Move the information inside AppUI to App and remove AppUI
-Go to TodoContext and tranform it into a custom hook named 'useTodos' 
- this way it will not be necessary use React.CreateContext

----RENDER PROPS 
-in the 'TodoList' component in App.js render the TodosLoading, TodosError, 
EmptyTodos and TodoItem components as render props.

----RENDER FUNCTIONS
-create a component to display when no search results exist.
-render the 'todoItem' component as a 'render prop' or as a 'render function' 
and allow the 'todo list' component to receive it by both methods.

----React.Children and React.CloneElement
-display loading states in counter and search input

-----HIGH ORDER COMPONENTS
-notify when there are changes using localStorage on the main page to another 
that is open so that the user has the option to refresh the page and synchronize
the information.

-----MIGRATION FROM 'useState' to 'useReducer'





